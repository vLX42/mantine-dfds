/* eslint-disable no-console */
const path = require('path')
const util = require('util')
const execa = require('execa')
const rimraf = require('rimraf')
const glob = require('glob')
const fse = require('fs-extra')
const prettier = require('prettier')

const EOL = require('os').EOL
const isWindows = EOL === '\r\n'

const rimrafp = util.promisify(rimraf)

async function getPrettierConfig() {
  const prettierConfig = await prettier.resolveConfig(process.cwd())
  // in order to prevent line ending diffs we adjust the prettier config to enforce os line-endings
  prettierConfig.endOfLine = isWindows ? 'crlf' : 'lf'
  return prettierConfig
}

async function generate() {
  const res = await Promise.allSettled([
    generateComponents(path.resolve(__dirname, '../src/svgs/system'), path.resolve(__dirname, '../src/system')),
    generateComponents(path.resolve(__dirname, '../src/svgs/core'), path.resolve(__dirname, '../src/core'), {
      deprecated: true,
    }),
    generateComponents(path.resolve(__dirname, '../src/svgs/links'), path.resolve(__dirname, '../src/links'), {
      deprecated: true,
    }),
    generateComponents(path.resolve(__dirname, '../src/svgs/pax'), path.resolve(__dirname, '../src/pax')),
    generateComponents(path.resolve(__dirname, '../src/svgs/transport'), path.resolve(__dirname, '../src/transport')),
    generateComponents(path.resolve(__dirname, '../src/svgs/flags'), path.resolve(__dirname, '../src/flags')),
    generateComponents(
      path.resolve(__dirname, '../src/svgs/social-media'),
      path.resolve(__dirname, '../src/social-media')
    ),
    generateComponents(path.resolve(__dirname, '../src/svgs/payment'), path.resolve(__dirname, '../src/payment')),
    generateComponents(path.resolve(__dirname, '../src/svgs/logistics'), path.resolve(__dirname, '../src/logistics')),
  ])

  const errors = res.filter((p) => p.status === 'rejected').map((p) => p.reason)

  // log errors
  errors.forEach((e) => console.error(e))
  process.exit(errors.length > 0 ? 1 : 0)
}

async function generateComponents(srcPath, outPath, options = {}) {
  const { deprecated } = options

  console.log(`Generating from ${srcPath} to ${outPath}`)
  await rimrafp(outPath)

  // removeUnknownsAndDefaults needs to be false otherwise fill="#000" will be removed
  const svgoConfig = {
    plugins: [{ removeTitle: true }, { removeUnknownsAndDefaults: false }],
  }

  const prettierConfig = await getPrettierConfig()

  // Primary icon colors: '#000' and '#002b45' will be replaced with 'currentColor' so it can be styled with 'color'
  // Secondary icon colors: '#8c8c8c' and '#FFC108' will be replaced with 'inherit' so it can be styled with 'fill'
  const colorReplacements = [
    '--replace-attr-values',
    '#002b45=currentColor',
    '--replace-attr-values',
    '#000=currentColor',
    '--replace-attr-values',
    '#8c8c8c=inherit',
    '--replace-attr-values',
    '#FFC108=inherit',
  ]
  await execa(
    'svgr',
    [
      '--ext',
      'tsx',
      '--icon',
      '--ref',
      ...(!srcPath.includes('flags') ? colorReplacements : []), // don't replace color in flags
      '--svgo-config',
      JSON.stringify(svgoConfig),
      '--template',
      deprecated ? 'scripts/deprecated-template.js' : 'scripts/template.js',
      '--prettier-config',
      JSON.stringify(prettierConfig),
      '--out-dir',
      outPath,
      srcPath,
    ],
    {
      stdio: 'inherit',
    }
  )

  const files = glob.sync('*.tsx', { ignore: ['index.tsx'], cwd: outPath })
  // fix ratio for flags
  if (srcPath.includes('flags/Flag')) {
    await fixWidthHeightRatio(glob.sync('*.tsx', { cwd: outPath, absolute: true }))
  }
  console.log('Generating index file with exports')
  await createIndexFile(files, outPath, options)
  await createAllIconsFile(files, outPath, options)
}

async function createIndexFile(files, outPath, options = {}) {
  const { deprecated } = options
  const lines = files.reduce((lines, file) => {
    const name = path.parse(file).name

    // escape index file
    if (name.includes('index')) {
      return lines
    }

    lines.push(`export { default as ${name} } from './${name}'`)
    return lines
  }, [])
  lines.unshift('/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */')
  if (deprecated) {
    lines.unshift('/* eslint-disable deprecation/deprecation */')
  }

  const content = await format(lines.join(EOL))
  await fse.writeFile(path.resolve(outPath, './index.ts'), content, 'utf8')
}

// When using the --icon option the height and width of the svgs are set to 1em.
// This is fine for the icons but for the flags the aspect ratio is NOT a square.
// This function modifies the width so the svg component will have the correct
// aspect ratio while allowing to scale using font-size.
async function fixWidthHeightRatio(filePaths) {
  for (const file of filePaths) {
    let content = (await fse.readFile(file)).toString()
    try {
      // find the viewBox attribute and parse the value
      const [, , w, h] = content.match(/viewBox="(.*?)"/)[1].split(' ')
      // replace width with fixed ratio value
      content = content.replace('width="1em"', `width="${parseFloat((w / h).toPrecision(4))}em"`)
      await fse.writeFile(file, content, 'utf8')
    } catch (e) {
      console.log(e)
      throw new Error(`Could not fix width height ratio on ${file}. Missing viewBox prop?\n${e}`)
    }
  }
}

async function createAllIconsFile(files, outPath, options = {}) {
  const { deprecated } = options
  console.log(`Generating all-icons.ts file in ${outPath}`)

  const lines = []

  lines.push("import * as Icons from './'")
  // if options.deprecated the @deprecated jsdoc comment
  if (deprecated) {
    lines.push('//** @deprecated *//')
  }
  lines.push('const all = ')
  lines.push('[')
  lines.push(
    ...files.reduce((lines, file) => {
      const name = path.parse(file).name

      // escape index file
      if (name.includes('index')) {
        return lines
      }

      lines.push(` { name:'${name}', component: Icons.${name} },`)
      return lines
    }, [])
  )
  lines.push(']')
  lines.push('export default all')
  lines.unshift('/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */')
  if (deprecated) {
    lines.unshift('/* eslint-disable deprecation/deprecation */')
  }

  const content = await format(lines.join(EOL))
  await fse.writeFile(path.resolve(outPath, './all-icons.ts'), content, 'utf8')
}

async function format(content) {
  const prettierConfig = await getPrettierConfig()
  return prettier.format(content, { parser: 'babel', ...prettierConfig })
}

if (require.main === module) {
  void generate()
}

module.export = generate
